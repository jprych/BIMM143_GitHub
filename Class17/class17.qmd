---
title: "Class17"
author: "Jordan Prych (A17080226)"
format: pdf
toc: TRUE
---

Code to log into cloud and copy files back into personal comuputer 

Instance ID

i-0f6c8de4006ff1785 (BIMM143_jprych)
Open an SSH client.

Locate your private key file. The key used to launch this instance is bimm143_jprych.pem

Run this command, if necessary, to ensure your key is not publicly viewable.
chmod 400 "bimm143_jprych.pem"

Connect to your instance using its Public DNS:
  ec2-54-149-116-189.us-west-2.compute.amazonaws.com

Example:
  
  ssh -i "bimm143_jprych.pem" ubuntu@ec2-54-149-116-189.us-west-2.compute.amazonaws.com

scp -r -i "bimm143_jprych.pem" ubuntu@ec2-54-149-116-189.us-west-2.compute.amazonaws.com:~/*_quant .


## Downstream Analysis 

We can now use R and Bioconductor tools to explore the dataset on our iwn computers. 

Use `tximport()` to enable straightforward import of Kallisto results. 
```{r}
library(tximport)

# setup the folder and filenames to read
folders <- dir(pattern="SRR21568*")
samples <- sub("_quant", "", folders)
files <- file.path( folders, "abundance.h5" )
names(files) <- samples

txi.kallisto <- tximport(files, type = "kallisto", txOut = TRUE)
```

```{r}
head(txi.kallisto$counts)
```

```{r}
colSums(txi.kallisto$counts)
```

```{r}
sum(rowSums(txi.kallisto$counts)>0)
```

Filter out abandoned transcripts with no reads: 
```{r}
to.keep <- rowSums(txi.kallisto$counts) > 0
kset.nonzero <- txi.kallisto$counts[to.keep,]
```


Filter out those with no change over the samples: 
```{r}
keep2 <- apply(kset.nonzero,1,sd)>0
x <- kset.nonzero[keep2,]
```

## PCA 

```{r}
pca <- prcomp(t(x), scale=TRUE)
```

```{r}
summary(pca)
```

```{r}
plot(pca$x[,1], pca$x[,2], 
     col=c("blue", "blue", "red", "red"), 
     xlab="PC1", ylab="PC2", pch=16
     )
```


ggplot 

```{r}
library(ggplot2)
library(ggrepel)

# Make metadata object for the samples
colData <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(colData) <- colnames(txi.kallisto$counts)

# Make the data.frame for ggplot 
y <- as.data.frame(pca$x)
y$Condition <- as.factor(colData$condition)

ggplot(y) +
  aes(PC1, PC2, col=Condition) +
  geom_point() +
  geom_text_repel(label=rownames(y)) +
  theme_bw()
```

```{r}
library(ggplot2)
library(ggrepel)

# Make metadata object for the samples
colData <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(colData) <- colnames(txi.kallisto$counts)

# Make the data.frame for ggplot 
y <- as.data.frame(pca$x)
y$Condition <- as.factor(colData$condition)

ggplot(y) +
  aes(PC1, PC3, col=Condition) +
  geom_point() +
  geom_text_repel(label=rownames(y)) +
  theme_bw()
```

```{r}
library(ggplot2)
library(ggrepel)

# Make metadata object for the samples
colData <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(colData) <- colnames(txi.kallisto$counts)

# Make the data.frame for ggplot 
y <- as.data.frame(pca$x)
y$Condition <- as.factor(colData$condition)

ggplot(y) +
  aes(PC2, PC3, col=Condition) +
  geom_point() +
  geom_text_repel(label=rownames(y)) +
  theme_bw()
```


## OPTIONAL: Differential-Expression Analysis 

```{r}
library(DESeq2)
```


```{r}
sampleTable <- data.frame(condition = factor(rep(c("control", "treatment"), each = 2)))
rownames(sampleTable) <- colnames(txi.kallisto$counts)
```


```{r}
dds <- DESeqDataSetFromTximport(txi.kallisto,
                                sampleTable, 
                                ~condition)
```

```{r}
dds <- DESeq(dds)
```


```{r}
res <- results(dds)
head(res)
```









