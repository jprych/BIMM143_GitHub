---
title: "Class 13 Transcriptomics and RNAseq Data"
author: "Jordan Prych(A17080226)"
format: pdf
toc: TRUE
---


Today we will analyze data from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

## Import countData and colData

There are two datasets I need to import/read

-`countData` the transcript counts per gene (rows) in the different experiments 

-`colData` information (a.k.a metadata) about the columns (i.e. experiments) in `countData`

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)

metadata <- read.csv("airway_metadata.csv")
```

We can peak at these with the `head()` function

```{r}
head(counts)
```

```{r}
head(metadata)
```

>Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```


>Q2. How many 'control' cell lines do we have? 

```{r}
table(metadata$dex)
```


So, is the expression of a given gene different when the drug is present versus when the drug is not present? 

We can find the average (mean) count values per gene for all "control" experiments and compare it to the mean values for "treated". 


- Extract all "control" columns/experiments from the `counts` data

- Find the mean value for each gene in these columns(finding mean across the rows)

- Extract all "treated" experiments from the `counts` data

- Find the mean value for each gene in these columns(finding mean across the rows)


```{r}
control.inds <- metadata$dex == "control"
control.counts <- counts[ , control.inds]
dim(control.counts)
```

Now we find the row wise mean 

```{r}
control.mean <- rowSums(control.counts)/ncol(control.counts)
head(control.mean)
```
>Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

Compared to the lab sheet, unsing the `rowSums()` function will be more robus if the number of rows/gene in the dataset changes. 

>Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

Now we find the row wise mean for extracted "treated" experiments from the `counts` data

```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[ ,treated.inds]
dim(treated.counts)
```

```{r}
treated.mean <- rowSums(treated.counts)/ncol(treated.counts)
head(treated.mean)
```


Let's put these two values together for easy bookkeeping
```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

>Q5a. Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

Let's plot control.mean vs. treated.mean 

```{r}
plot(meancounts)
```


> Q5b. You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

Plot will ggplot using the `geom_point()` function. 


```{r}
library(ggplot2)

ggplot(meancounts) + aes(control.mean, treated.mean) + geom_point()
```

Whenever we see data that is so heavily skewed like this, we often log transform it so we can see what is going on more easily. 

>Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts, log="xy")
```


We most often work in log2 units as this makes the math easier. Let's have a play to see this

We can now add "log2 fold-change " values to our `meancounts` dataset. 

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)

head(meancounts)
```

We need to filter out zero count genes- i.e. remove the rows(genes) that have a 0 value in either control or treated means. 



>Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

skipped question in lab.  

>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

How many genes are "up" regulated at the common log2 fold-change threshold of +2. 

```{r}
up.inds <- meancounts$log2fc >= 2
sum(up.inds, na.rm=T)
```

>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

How many genes are "down" regulated at the threshold of -2? 

```{r}
down.inds <- meancounts$log2fc <= -2
sum(down.inds, na.rm=T)
```

>Q10. Do you trust these results? Why or why not?


These results are only showing us whether these genes are upregulated or downregulated based on our analysis of fold change. However, fold-change is not a measure of statistical significance, and to truly trust our results, we must show that our resuts are signficianct and not a false positives. 







##DESeq2 Analysis 


To do this the right way, we need to consider the significance of the differences not just their magnitude. 

```{r}
#| message: false
library(DESeq2)
```

To use this package, it wants countData and colData in a specific format. 

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, colData=metadata, design= ~dex)
```

```{r}
dds <- DESeq(dds)
```


Extract my results
```{r}
res <- results(dds)
head(res)
```
>Q11.  Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

skipped question in lab 

## Data Visualization 

Plot of fold-change vs. p-value(adjusted for multiple testing)

```{r}
plot(res$log2FoldChange, res$padj)
```

Take the log of the p-value 

```{r}
plot(res$log2FoldChange, log(res$padj))

```

We can just flip the y-axis by putting a negative sign on it 

```{r}
plot(res$log2FoldChange, -log(res$padj), xlab="Log2 Fold-Change", ylab="-log(P-value)")
```

Let's save our work to date

```{r}
write.csv(res, file="myresults.csv")
```


To finish off, let's make a nicer volcano plot

Add the log2 threshold of +2/-2 
Add the p-value threshold lines at 0.05
add color to highlight the subset of genes that meet both of the above thresholds

Make with ggplot...

```{r}
library(ggplot2)
#Color vectors
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange >=2] <- "purple"
mycols[res$log2FoldChange <= -2] <- "magenta"
mycols[res$padj > 0.05] <- "gray"


  
ggplot(res) + aes(res$log2FoldChange, -log(res$padj)) + geom_point(col=mycols) + geom_vline(xintercept=c(-2,2), col="red", lty=2) + geom_hline(yintercept = -log(0.05), col="blue", lty=2)

```


## Add gene annotation data 

Now the question is what are the colored points in the above volcano plot - i.e. what are the genes most influenced by drug treatment here? 

We will use some BioConductor packages to "map" the ENSEMBLE ids to more useful gene SYMBOL names/ids

We can install these packages with: 

`BiocManager::install("AnnotationDbi")`
```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```


What database identifiers can I translate between here: 

```{r}
columns(org.Hs.eg.db)
```

We can now use the `mapIDs()` function to translate/map between these different identifier formats. 

Let's add SYMBOL, GENENAME, and ENTREZID. 

```{r}
res$symbol <- mapIds(org.Hs.eg.db, key=rownames(res), keytype="ENSEMBL", column="SYMBOL")

res$genename <- mapIds(org.Hs.eg.db, key=rownames(res), keytype="ENSEMBL", column="GENENAME")

res$entrez <- mapIds(org.Hs.eg.db, key=rownames(res), keytype="ENSEMBL", column="ENTREZID")
head(res)
```

## Pathway Analysis 

Now I know the gene names and their IDs in different databases. I want to know what type of biology they are involved in...

This is the job of "pathway analysis" (aka "gene set enrichment")

There sre tons of different BioConductor packages for pathwy analysis here we just use one of them called **gage** and **pathview**. I will install these packages with `BiocManager::install(c("gage", "pathview", "gageData"))`


```{r}
library(gage)
library(gageData)
library(pathview)
```

Look up the KEGG genetics 

```{r}
data("kegg.sets.hs")
head(kegg.sets.hs, 2)
```


We will use these KEGG genesets(aka pathways) and our `res` results to see what overlaps. To do this we will use the `gage()` function. 

For input `gage()`  wants just a vector or importance - in our case the FoldChange values. 

Vectors in R can have "names" that are useful for bookkeeping so we know what a given value corresponds to. Let's put names on our `foldchanges` vector- here we will use `res$entrez`
```{r}
foldchanges <- res$log2FoldChange

names(foldchanges) <- res$entrez

head(foldchanges)
```

Now we can run "pathway analysis"
```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
head(keggres$less)
```

We can get a pathway image file with out genesets highlighted via the `pathview()` function. 

```{r}
pathview(foldchanges, pathway.id="hsa05310")
```

![](hsa05310.pathview.png)
















