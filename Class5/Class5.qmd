---
title: "Class 5: Data Viz with ggplot"
author: "Jordan Prych(PID: A17080226)"
format: pdf
---

## Intro to ggplot

There are many graphics system in R(ways to make plots and figures). These include "base" R plots. Today we will focus mostly on the **ggplot2** package. 

Let's start with a plot of a simple in-built dataset called `cars`

```{r}
cars
```

```{r}
plot(cars)
```

Let's see how we can make this figure using **ggplot**. First, I need to install this package on my computer. To install any R package I use the function `install.packages()`. 

> I will run `install packages("ggplot2") in my R console not this quarto document. 

Before I can use any functions from add-on packages, I need to load the package from my "library()" with the `library(ggplot2)` call. 

```{r}
library(ggplot2)
ggplot(cars)
```

All ggplot figures have at least 3 things (called layers). These include: 

-**data** (the input dataset I want to plot from)

-**aes** (the aesthetic mapping of the data to my plot)

-**geoms** (the geom_point(), geom_line(), etc. that I want to draw)

```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) + 
  geom_point()
```

Let's add a line to show the relationship here:
```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) + 
  geom_point() + geom_smooth(method="lm") + theme_bw() +labs(title="My First GGPLOT") 
```

> Q1 Which geometric layer should be used to create scatter plots in ggplot2?

Geom_point()

## Gene Expression Figure 

The code to read the dataset
```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

> Q2 How many genes are in this dataset? 

```{r}
nrow(genes)
```
> Q3 How many columns  are in this dataset? 

```{r}
ncol(genes)
```
> Q4 Use the table() function on the State column of this data.frame to find out how many ‘up’ regulated genes there are. What is your answer?

```{r}
table(genes$State)
```

> Q5 Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset?

```{r}
n.tot <- nrow(genes)
vals <- table(genes$State)
vals/n.tot

vals.percent<- vals/n.tot * 100
round(vals.percent, 2)
```


A first plot of this dataset: 

```{r}
ggplot(genes) + 
  aes(x=Condition1, y=Condition2) + 
  geom_point()
```
To add color to this plot: 

```{r}
ggplot(genes) + 
  aes(x=Condition1, y=Condition2, col=State) + 
  geom_point() 
```
To save plot as `p`: 

```{r}
p <-ggplot(genes) + 
  aes(x=Condition1, y=Condition2, col=State) + 
  geom_point()
```

To specify color scale and add titles: 

```{r}
p + scale_colour_manual(values=c("blue", "gray", "red")) + labs(title="Gene Expression Changes Upon Drug Treatment", x="Control Expression", y="Drug Pressence Expression")
```

## GapMinder Figures 

The code to read the data 
```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

First, we need to install the dplyr package with the command `install.packages("dplyr")`

> I will run `install.packages("dplyr") in the Console and not in the quarto document 

Before I can use any functions from add-on packages, I need to load the package from my "library()" with the `library(dplyr)` call. We will filter the data for rows with the year value of **2007** and save as `gapminder_2007`

```{r}
library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)
```

> Q1 Complete the code below to produce a first basic scater plot of this gapminder_2007 dataset:

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point()
```

To observe overlapping points, use alpha argument: 

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha=0.4)
```


Mapping more variables to the aesthetic to add dimension to the plot: 
```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.4)
```

Color by numeric variable population(pop): 
>This changes the scale to be continuous 

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color=pop) +
  geom_point(alpha=0.4)
```

Adjusting Point Size 
```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, size=pop) +
  geom_point(alpha=0.4)
```

Use `scale_size_area()` to reflect proportional population differences by point size 
```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, size=pop, color=continent) +
  geom_point(alpha=0.4) +
  scale_size_area(max_size=10)
```

> Q2 Adapt the code you have learned thus far to reproduce our gapminder scatter plot for the year 1957? 

```{r}
library(dplyr)

gapminder_1957 <- gapminder %>% filter(year==1957)

ggplot(gapminder_1957) + aes(x=gdpPercap, y=lifeExp, size=pop, color=continent) +
  geom_point(alpha=0.7) +
  scale_size_area(max_size=15)
```
> What do you notice about this plot? Is it easy to compare with the one for 2007?

The size of the points are larger in the 1957 plot compared to the 2007 plot, making it easier to compare population size compared to a smaller scale size in the 2007 plot. 

> Q3 Do the same steps above but include 1957 and 2007 in your input dataset for ggplot(). You should now include the layer facet_wrap(~year) to produce the following plot:

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957 | year==2007)

ggplot(gapminder_1957) +
  aes(x=gdpPercap, y=lifeExp, size=pop, color=continent) + 
  geom_point(alpha=0.7) + 
  scale_size_area(max_size=10) + facet_wrap(~year)
```



## Patchwork Figures 


First, we need to install the patchwork package with the command `install.packages("patchwork")`

> I will run `install.packages("patchwork") in the Console and not in the quarto document 

Before I can use any functions from add-on packages, I need to load the package from my "library()" with the `library(patchwork)` call.


```{r}
library(patchwork)
```

From Class 5 Worksheet: 

```{r}
# Setup some example plots 
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
p3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec))
p4 <- ggplot(mtcars) + geom_bar(aes(carb))

# Use patchwork to combine them here:
(p1 | p2 | p3) /
      p4
```


To combine plots into a multi-panel figure: 

```{r}
p1<- p + scale_colour_manual(values=c("blue", "gray", "red")) + labs(title="Gene Expression", x="Control Expression", y="Drug Pressence Expression")
p2<- ggplot(gapminder_1957) +
  aes(x=gdpPercap, y=lifeExp, size=pop, color=continent) + 
  geom_point(alpha=0.7) + 
  scale_size_area(max_size=10)

#Use patchwork to combine them 
(p1|p2)
```



